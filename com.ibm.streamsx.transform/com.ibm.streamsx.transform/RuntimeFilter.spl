namespace com.ibm.streamsx.transform;

/**
 * Filter tuples based on a expression given as an rstring
 */

public composite RuntimeFilter (input ToFilter, ChangeFilter; output Filtered) {
param expression<rstring> $initialFilter: "";
	   expression<rstring> $filterExpression;
       expression <boolean> $testFilterBeforeUpdate: false;
graph

stream<ToFilter> Filtered = Custom(ToFilter;ChangeFilter) {
	logic state: {
		mutable rstring currentFilter = $initialFilter;
        boolean testFilterBeforeUpdate=$testFilterBeforeUpdate;
	}
	onTuple ChangeFilter: {
        rstring newfilter = $filterExpression;
		if (testFilterBeforeUpdate) {
           mutable int32 err=0;
           evalPredicate(newfilter,(ToFilter){},err);
           if (err == 0) {
              currentFilter=newfilter;
              if (isTraceable(Trace.info)) {
                 appTrc(Trace.info,"Updating filter to "+newfilter);
              }
          }
          else {
             appTrc(Trace.error,"Error "+(rstring)err+" on new filter "+newfilter+"; not updating");
             }
        }
        else {
           if (isTraceable(Trace.info)) {
              appTrc(Trace.info,"Updating filter to "+newfilter);
           }
           currentFilter = newfilter;
        }
	}
	onTuple ToFilter: {
		mutable int32 error = 0;
		if (evalPredicate(currentFilter,ToFilter,error)) {
			submit(ToFilter,Filtered);
		}
        if (error != 0) {
          appTrc(Trace.error,"Error code "+(rstring)error+" evaluating "+currentFilter+" on "+(rstring)ToFilter);
        }
	}
	onPunct ToFilter: {
		submit(currentPunct(),Filtered);
	}
}

}
